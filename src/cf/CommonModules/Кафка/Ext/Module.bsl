
#Область ПрограммныйИнтерфейс

Процедура ОтправитьЗаявки() Экспорт
	
	ИсходящиеСообщения = ИсходящиеСообщенияЗаявки();
	Если ИсходящиеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	КафкаТопикЗаявок = Константы.КафкаТопикЗаявок.Получить();
	
	РабораСКафкой = Обработки.РаботаСКафкой.Создать();
	РабораСКафкой.ЗаполнитьПоУмолчанию(КафкаТопикЗаявок);
	
	Инициализация_Запись(РабораСКафкой);
	ЗагрузитьJSON(РабораСКафкой, ИсходящиеСообщения);
	Отправить_Запись(РабораСКафкой); 
	
	ОбработатьИсходящиеСообщенияЗаявки(ИсходящиеСообщения);
	
КонецПроцедуры

Процедура ПолучитьЗаявки() Экспорт
	
 	КафкаТопикЗаявок = Константы.КафкаТопикЗаявок.Получить();
	
	РабораСКафкой = Обработки.РаботаСКафкой.Создать();
	РабораСКафкой.ЗаполнитьПоУмолчанию(КафкаТопикЗаявок);
	
	Инициализация_Чтение(РабораСКафкой);
	Данные = Новый Массив;
	ПрочитатьJSON_Чтение(РабораСКафкой, Данные); 
	
	Для каждого ДанныеЗаявки Из Данные Цикл
		ОбработатьПолученнуюЗаявку(ДанныеЗаявки); 
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ОтправитьЗаказы() Экспорт
	
	ИсходящиеСообщения = ИсходящиеСообщенияЗаказы();
	Если ИсходящиеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	КафкаТопикЗаявок = Константы.КафкаТопикЗаказов.Получить();
	
	РабораСКафкой = Обработки.РаботаСКафкой.Создать();
	РабораСКафкой.ЗаполнитьПоУмолчанию(КафкаТопикЗаявок);
	
	Инициализация_Запись(РабораСКафкой);
	ЗагрузитьJSON(РабораСКафкой, ИсходящиеСообщения);
	Отправить_Запись(РабораСКафкой);

	ОбработатьИсходящиеСообщенияЗаказы(ИсходящиеСообщения);
	
КонецПроцедуры

Процедура ПолучитьЗаказы() Экспорт
	
 	КафкаТопикЗаявок = Константы.КафкаТопикЗаказов.Получить();
	
	РабораСКафкой = Обработки.РаботаСКафкой.Создать();
	РабораСКафкой.ЗаполнитьПоУмолчанию(КафкаТопикЗаявок);
	
	Инициализация_Чтение(РабораСКафкой);
	Данные = Новый Массив;
	ПрочитатьJSON_Чтение(РабораСКафкой, Данные); 
	
	Для каждого ДанныеЗаказа Из Данные Цикл
		ОбработатьПолученныйЗаказ(ДанныеЗаказа); 
	КонецЦикла;
	
КонецПроцедуры  

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура Инициализация_Запись(РабораСКафкой)

	РабораСКафкой.Отправитель_Закрыть();
	
	сткРезультат = РабораСКафкой.СоздатьОтправителя();
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из РабораСКафкой.Запись_НастройкиГлобальные Цикл
		сткРезультат = РабораСКафкой.Отправитель_УстановитьПараметрГлобальный(Строка.Key, Строка.Value);
		Если Не сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из РабораСКафкой.Запись_НастройкиТопика Цикл
		сткРезультат = РабораСКафкой.Отправитель_УстановитьПараметрТопика(Строка.Key, Строка.Value);
		Если НЕ сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
		
	сткРезультат = РабораСКафкой.Отправитель_Инициализировать(РабораСКафкой.Адрес_Запись, РабораСКафкой.Топик_Запись, РабораСКафкой.Раздел_Запись);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;

КонецПроцедуры  

Процедура Отправить_Запись(РабораСКафкой)
	
	булДанныеПоданыВBase64 = Ложь;
	
	сткРезультат = РабораСКафкой.Отправитель_ДекодироватьКлючСообщенияКакBase64Строку(булДанныеПоданыВBase64);
	Если Не сткРезультат.булУспешно Тогда Сообщить(сткРезультат.стрОписаниеОшибки);	Возврат; КонецЕсли;
	сткРезультат = РабораСКафкой.Отправитель_ДекодироватьТелоСообщенияКакBase64Строку(булДанныеПоданыВBase64);
	Если Не сткРезультат.булУспешно Тогда Сообщить(сткРезультат.стрОписаниеОшибки);	Возврат; КонецЕсли;
	сткРезультат = РабораСКафкой.Отправитель_ДекодироватьЗначенияЗаголовковКакBase64Строку(булДанныеПоданыВBase64);
	Если Не сткРезультат.булУспешно Тогда Сообщить(сткРезультат.стрОписаниеОшибки);	Возврат; КонецЕсли;
			
	сткРезультат = РабораСКафкой.Отправитель_Отправить();
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;

	сткРезультат = РабораСКафкой.Отправитель_ВсеСообщенияДоставлены();
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
	
	Сообщить("Все сообщения доставлены: " + Строка(сткРезультат.булВсеСообщенияДоставлены));
	сткРезультат = РабораСКафкой.Отправитель_ПолучитьJSONОтчетОДоставке();
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьJSON(РабораСКафкой, ИсходящиеСообщения)
	
	мДанныеНаЗапись = Новый Массив();
	Для каждого Строка Из ИсходящиеСообщения Цикл
		
		Ключ = Строка.Заявка;
		Значение = СтруктурвБезСсылки(Строка);
		
		мДанныеНаЗапись.Добавить(Новый Структура("Key, Value", Ключ, Значение));
		
	КонецЦикла;
	
	сткРезультатПреобразования = СтруктуруВJSON(мДанныеНаЗапись);   
	стрДанные = "";
	стрДанные = стрДанные + сткРезультатПреобразования.стрДанные;
	сткРезультат = РабораСКафкой.Отправитель_ЗагрузитьСообщенияИзJSONВСписокНаОтправку(стрДанные);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура Инициализация_Чтение(РабораСКафкой)
		
 	ПодпискаТопики_Чтение = 1;

	РабораСКафкой.Получатель_Закрыть();
	
	сткРезультат = РабораСКафкой.СоздатьПолучателя();
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из РабораСКафкой.Чтение_НастройкиГлобальные Цикл
		сткРезультат = РабораСКафкой.Получатель_УстановитьПараметрГлобальный(Строка.Key, Строка.Value);
		Если Не сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из РабораСКафкой.Чтение_НастройкиТопика Цикл
		сткРезультат = РабораСКафкой.Получатель_УстановитьПараметрТопика(Строка.Key, Строка.Value);
		Если НЕ сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
		
	сткРезультат = РабораСКафкой.Получатель_Инициализировать(РабораСКафкой.Адрес_Чтение, РабораСКафкой.GroupID_Чтение);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
	
	Если ПодпискаТопики_Чтение = 1 Тогда
		мТопики = Новый Массив();
		Для Каждого стрТопик Из РабораСКафкой.тзТопики_Чтение Цикл
			Если Не мТопики.Найти(стрТопик.Topic) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			мТопики.Добавить(стрТопик.Topic);			
		КонецЦикла;
		
		сткРезультат = РабораСКафкой.Получатель_Подписаться(мТопики);
		Если Не сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;
	Иначе
		сткРезультат = РабораСКафкой.Получатель_ОчиститьСписокНазначений();
		Если Не сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;

		Для Каждого стрТопик Из РабораСКафкой.тзТопикиРазделы_Чтение Цикл			
			сткРезультат = РабораСКафкой.Получатель_ДобавитьНазначение(стрТопик.Topic, стрТопик.Partition, ?(стрТопик.Offset = -1, Неопределено, стрТопик.Offset));
			Если Не сткРезультат.булУспешно Тогда
				Сообщить(сткРезультат.стрОписаниеОшибки);	
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		сткРезультат = РабораСКафкой.Получатель_Назначить();
		Если Не сткРезультат.булУспешно Тогда
			Сообщить(сткРезультат.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

Процедура ПрочитатьJSON_Чтение(РабораСКафкой, Данные)
	
	ЧитатьДвоичныеДанные = Ложь;
	булНеЭкранироватьСообщение = Ложь; 
	ПодпискаТопики_Чтение = 1;
	
	чслЧтение = Число(XMLСтрока(РабораСКафкой.чслПрочитатьКоличество_Чтение));
	чслТаймаут = Число(XMLСтрока(РабораСКафкой.чслТаймаутПоУмолчанию));
	ЧитатьДД = ?(ЧитатьДвоичныеДанные, Истина, Ложь);
	
	сткРезультат = РабораСКафкой.Получатель_ЭкранироватьЗначениеСообщения(НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
	КонецЕсли;	
	
	сткРезультат = РабораСКафкой.Получатель_ЭкранироватьКлючСообщения(НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
	КонецЕсли;	
	
	сткРезультат = РабораСКафкой.Получатель_ЭкранироватьКлючиЗаголовков(НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
	КонецЕсли;	
	
	сткРезультат = РабораСКафкой.Получатель_ЭкранироватьЗначенияЗаголовков(НЕ булНеЭкранироватьСообщение);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
	КонецЕсли;	

	
	чНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	сткРезультат = РабораСКафкой.Получатель_ПрочитатьСписокСообщенийВПул(чслЧтение, чслТаймаут, ?(ПодпискаТопики_Чтение = 1, 10, 1));
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
	КонецЕсли;	
	
	сткРезультат = РабораСКафкой.Получатель_ПолучитьСообщенияИзПулаJSON(ЧитатьДД);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;	
		
	чОкончание = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Сообщить("Затрачено на получение: " + Строка(чОкончание - чНачало));

	сткРезультат = JSONВСтруктуру(сткРезультат.стрСообщения);
	Если Не сткРезультат.булУспешно Тогда
		Сообщить(сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;	
	
	Если сткРезультат.масДанные.Количество() > 0 Тогда		
		сткРезультатФиксации = РабораСКафкой.Получатель_ЗафиксироватьСмещения();
		Если Не сткРезультатФиксации.булУспешно Тогда
			Сообщить(сткРезультатФиксации.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	РабораСКафкой.тзДанные_Чтение.Очистить();	
	тзДанные = РабораСКафкой.Получатель_ПолучитьТаблицуСообщения();
	Для Каждого Элемент Из сткРезультат.масДанные Цикл
		
		стрДобавить = тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(стрДобавить, Элемент);	
		стрДобавить.headers = РабораСКафкой.Получатель_ПолучитьТаблицуЗаголовки();
		
		Для Каждого СтрокаЗаголовок Из Элемент.Headers Цикл
			ЗаполнитьЗначенияСвойств(стрДобавить.headers.Добавить(), СтрокаЗаголовок);
		КонецЦикла; 
		
		Сообщить("key - " + стрДобавить.key + "; " + "value - " + стрДобавить.value);
		
		ДанныеЗаявки = JSONВСтруктуруДанных(стрДобавить.value);
		Данные.Добавить(ДанныеЗаявки);
		
	КонецЦикла;
	
	тзДанные_Чтение = тзДанные;
	
	ОбновитьСмещенияРазделов(РабораСКафкой);
	
КонецПроцедуры 

Процедура ОбновитьСмещенияРазделов(РабораСКафкой)
	
	мОшибки = Новый Массив();
	чслТаймаут = Число(XMLСтрока(РабораСКафкой.чслТаймаутПоУмолчанию));
	
	Для Каждого Строка Из РабораСКафкой.тзТопикиРазделы_Чтение Цикл
		
		Топик = XMLСтрока(Строка.Topic);
		Раздел = Число(XMLСтрока(Строка.Partition));
			
		сткРезультатПолучения = РабораСКафкой.Получатель_ПолучитьТекущееСмещениеРаздела(Топик, Раздел, чслТаймаут);
		Если НЕ сткРезультатПолучения.булУспешно Тогда
			мОшибки.Добавить(сткРезультатПолучения.стрОписаниеОшибки);	
			Продолжить;
		КонецЕсли;
		
		Строка.offset = сткРезультатПолучения.чСмещение; 
	Конеццикла;
	
	Если мОшибки.Количество() > 0 Тогда
		Сообщить("Ошибки получения текущих смещений: ");
		
		Для Каждого стрОшибка Из мОшибки Цикл
			Сообщить(Символы.Таб + стрОшибка);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ВспомогательныеПроцедурыИФункции

Функция СтруктуруВJSON(п_сткДанные)    Экспорт
	
	_сткРезультат = Новый Структура();
	
	_сткРезультат.Вставить("булУспешно",        Ложь);
	_сткРезультат.Вставить("стрДанные", 	    "");
	_сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	_ЗаписьJSON                = Новый ЗаписьJSON();
	_НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	
	_ЗаписьJSON.УстановитьСтроку();
	
	_НастройкиСериализацииJSON.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	_НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(_ЗаписьJSON, п_сткДанные, _НастройкиСериализацииJSON);
		
		_сткРезультат.стрДанные  = _ЗаписьJSON.Закрыть();
		_сткРезультат.булУспешно = Истина;
	Исключение
		_сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();	
	КонецПопытки;
	
	Возврат _сткРезультат;   	
КонецФункции

Функция JSONВСтруктуру(п_стрJSON)   Экспорт
		
	_сткРезультат = Новый Структура();
	
	_сткРезультат.Вставить("булУспешно",        Ложь);
	_сткРезультат.Вставить("масДанные",         Неопределено);
	_сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	_Чтение = Новый ЧтениеJSON;
	_Чтение.УстановитьСтроку(п_стрJSON);
	
	Попытка
		_Данные = ПрочитатьJSON(_Чтение, Ложь);
		
		Если ТипЗнч(_Данные) = Тип("Структура") Тогда
			_сткРезультат.масДанные = Новый Массив();	
			_сткРезультат.масДанные.Добавить(_Данные);
		ИначеЕсли ТипЗнч(_Данные) = Тип("Массив") Тогда
			_сткРезультат.масДанные = _Данные;				
		Иначе
			ВызватьИсключение "Не верный тип данных!";
		КонецЕсли;
		
		_сткРезультат.булУспешно = Истина;
	Исключение
		_сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;	
	
	_Чтение.Закрыть();
	
	Возврат _сткРезультат;	
КонецФункции

Функция СтрокаВДвоичныеДанные(СтрокаДляПреобразованияВДвоичныеДанные) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("ДвоичныеДанные", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");

	Поток  = Новый ПотокВПамяти();
	Запись = Новый ЗаписьДанных(Поток,КодировкаТекста.UTF8);
	
	Попытка
		Запись.ЗаписатьСимволы(СтрокаДляПреобразованияВДвоичныеДанные);
		Запись.Закрыть(); 
	Исключение
		сткРезультат.стрОписаниеОшибки = ОписаниеОшибки(); 
		Возврат сткРезультат;
	КонецПопытки;
	
	сткРезультат.ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные(); 
	сткРезультат.булУспешно = Истина;
	
	Возврат сткРезультат; 	
КонецФункции

Функция JSONВСтруктуруДанных(п_стрJSON)   Экспорт
	
	_Чтение = Новый ЧтениеJSON;
	_Чтение.УстановитьСтроку(п_стрJSON);
	
	Попытка
		_Данные = ПрочитатьJSON(_Чтение, Ложь);
		
		Если ТипЗнч(_Данные) = Тип("Структура") Тогда
			масДанные = _Данные;	
		Иначе
			ВызватьИсключение "Не верный тип данных!";
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	_Чтение.Закрыть();
	
	Возврат масДанные;	
		
 КонецФункции

Функция СтруктурвБезСсылки(КопируемаяСтруктура) 
	
	НоваяСтруктура = Новый Структура;
	Для Каждого Элемент Из КопируемаяСтруктура Цикл
		Если Элемент.Ключ = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтруктура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	Возврат НоваяСтруктура;
	
КонецФункции

#КонецОбласти

#Область РаботаСДанными

Функция ИсходящиеСообщенияЗаявки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОчередьИсходящихСообщенийЗаявок();
	Результат = Запрос.ВыполнитьПакет();
	СписокЗаявок = Результат.Получить(1).Выгрузить();
	СписокТоваровЗаявок = Результат.Получить(2).Выгрузить();
	
	МассивЗаявок = Новый Массив;
	
	Для каждого Заявка Из СписокЗаявок Цикл
		
		СтруктураЗаявки = СтруктураЗаявки();
		СтруктураЗаявки.Заявка = XMLСтрока(Заявка.Ссылка);
		СтруктураЗаявки.Контрагент = XMLСтрока(Заявка.Контрагент);
		СтруктураЗаявки.Ссылка = Заявка.Ссылка;
		
		МассивСтрок = Новый Массив;
		
		Отбор = Новый Структура("Ссылка", Заявка.Ссылка);
		СтрокиТоваров = СписокТоваровЗаявок.НайтиСтроки(Отбор);
		Для каждого Строка Из СтрокиТоваров Цикл
			
			СтруктураТоваров = СтруктураТоваров();
			СтруктураТоваров.Товар = XMLСтрока(Строка.Товар);
			СтруктураТоваров.Количество = Строка.Количество;
			
			МассивСтрок.Добавить(СтруктураТоваров);
			
		КонецЦикла;	 
		
		СтруктураЗаявки.Товары = МассивСтрок;
		
		МассивЗаявок.Добавить(СтруктураЗаявки);
		
	КонецЦикла;	
	
	Возврат МассивЗаявок;
	
КонецФункции

Функция ТекстЗапросаОчередьИсходящихСообщенийЗаявок()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОчередьИсходящихСообщенийЗаявок.Заявка КАК Заявка
	|ПОМЕСТИТЬ ОчередьИсходящихСообщенийЗаявок
	|ИЗ
	|	РегистрСведений.ОчередьИсходящихСообщенийЗаявок КАК ОчередьИсходящихСообщенийЗаявок
	|ГДЕ
	|	ОчередьИсходящихСообщенийЗаявок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИсходящихСообщений.Новое)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаДокумент.Ссылка КАК Ссылка,
	|	ЗаявкаДокумент.Контрагент КАК Контрагент
	|ИЗ
	|	ОчередьИсходящихСообщенийЗаявок КАК ОчередьИсходящихСообщенийЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заявка КАК ЗаявкаДокумент
	|		ПО ОчередьИсходящихСообщенийЗаявок.Заявка = ЗаявкаДокумент.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаТовары.Ссылка КАК Ссылка,
	|	ЗаявкаТовары.Товар КАК Товар,
	|	ЗаявкаТовары.Количество КАК Количество
	|ИЗ
	|	ОчередьИсходящихСообщенийЗаявок КАК ОчередьИсходящихСообщенийЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заявка.Товары КАК ЗаявкаТовары
	|		ПО ОчередьИсходящихСообщенийЗаявок.Заявка = ЗаявкаТовары.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураЗаявки() 
	
	СтруктураЗаявки = Новый Структура;
	СтруктураЗаявки.Вставить("Заявка");
	СтруктураЗаявки.Вставить("Контрагент");
	СтруктураЗаявки.Вставить("Товары");
	СтруктураЗаявки.Вставить("Ссылка");
	
	Возврат СтруктураЗаявки;
	
КонецФункции  

Функция СтруктураТоваров() 
	
	СтруктураТоваров = Новый Структура;
	СтруктураТоваров.Вставить("Товар");
	СтруктураТоваров.Вставить("Количество");   

	Возврат СтруктураТоваров;

КонецФункции

Процедура ОбработатьПолученнуюЗаявку(ДанныеЗаявки)
	
	НовыйДокумент = Документы.Заказ.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗаявки.Контрагент));
	НовыйДокумент.Заявка = Новый УникальныйИдентификатор(ДанныеЗаявки.Заявка);
	НовыйДокумент.Склад = Константы.ОсновнойСклад.Получить();
	НовыйДокумент.Организация = Константы.ОсновнаяОрганизация.Получить();
	НовыйДокумент.Статус = Перечисления.СтатусыЗаявки.Новая;
	НовыйДокумент.УстановитьНовыйНомер();

	Для каждого Строка Из ДанныеЗаявки.Товары Цикл
		
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		НоваяСтрока.Товар = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Товар));
		НоваяСтрока.Количество = Строка.Количество;
		
	КонецЦикла;	
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);	
	
КонецПроцедуры	

Функция ИсходящиеСообщенияЗаказы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОчередьИсходящихСообщенийЗаказов();
	Результат = Запрос.Выполнить();
	СписокЗаказов = Результат.Выгрузить();
	
	МассивЗаявок = Новый Массив;
	
	Для каждого Заказ Из СписокЗаказов Цикл
		
		СтруктураЗаказа = СтруктураЗаказа();
		СтруктураЗаказа.Заявка = XMLСтрока(Заказ.Заявка);
		СтруктураЗаказа.Статус = XMLСтрока(Заказ.Статус);
		СтруктураЗаказа.Ссылка = Заказ.Ссылка;
		
		МассивЗаявок.Добавить(СтруктураЗаказа);
		
	КонецЦикла;	
	
	Возврат МассивЗаявок;
	
КонецФункции

Функция ТекстЗапросаОчередьИсходящихСообщенийЗаказов()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОчередьИсходящихСообщенийЗаказов.Заказ КАК Заказ
	|ПОМЕСТИТЬ ОчередьИсходящихСообщенийЗаказов
	|ИЗ
	|	РегистрСведений.ОчередьИсходящихСообщенийЗаказов КАК ОчередьИсходящихСообщенийЗаказов
	|ГДЕ
	|	ОчередьИсходящихСообщенийЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИсходящихСообщений.Новое)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказДокумент.Ссылка КАК Ссылка,
	|	ЗаказДокумент.Заявка КАК Заявка,
	|	ЗаказДокумент.Статус КАК Статус
	|ИЗ
	|	ОчередьИсходящихСообщенийЗаказов КАК ОчередьИсходящихСообщенийЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК ЗаказДокумент
	|		ПО ОчередьИсходящихСообщенийЗаказов.Заказ = ЗаказДокумент.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураЗаказа() 
	
	СтруктураЗаказа = Новый Структура;
	СтруктураЗаказа.Вставить("Заявка");
	СтруктураЗаказа.Вставить("Статус");
	СтруктураЗаказа.Вставить("Ссылка");
	
	Возврат СтруктураЗаказа;
	
КонецФункции  

Процедура ОбработатьПолученныйЗаказ(ДанныеЗаказа)
	
	ДокументЗаявка = Документы.Заявка.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗаказа.Заявка));
	
	Если Не ЗначениеЗаполнено(ДокументЗаявка) Тогда
		Возврат;
	КонецЕсли;	
	
	ДокументОбъектЗаявка = ДокументЗаявка.ПолучитьОбъект();
	ДокументОбъектЗаявка.Статус = Перечисления.СтатусыЗаявки[ДанныеЗаказа.Статус];
	
	ДокументОбъектЗаявка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	
КонецПроцедуры

Процедура ОбработатьИсходящиеСообщенияЗаявки(ИсходящиеСообщения)
	
	Для Каждого Строка Из ИсходящиеСообщения Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьИсходящихСообщенийЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Строка.Ссылка);
		НаборЗаписей.Прочитать();                           
		
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.Состояние = Перечисления.СостоянияИсходящихСообщений.Отправлено;
		КонецЦикла;	
				
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИсходящиеСообщенияЗаказы(ИсходящиеСообщения)
	
	Для Каждого Строка Из ИсходящиеСообщения Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьИсходящихСообщенийЗаказов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Строка.Ссылка);
		НаборЗаписей.Прочитать();                           
		
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.Состояние = Перечисления.СостоянияИсходящихСообщений.Отправлено;
		КонецЦикла;	
				
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

