///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверка завершения периодического ожидания для обработчиков
// события ПередПериодическойОтправкойДанныхКлиентаНаСервер.
//
// Параметры:
//  ИмяСчетчика   - Строка - например, "СтандартныеПодсистемы.ЦентрМониторинга".
//  ВремяОжидания - Число - количество секунд ожидания до срабатывания счетчика.
//  ПервыйРаз     - Булево - если Истина, то возвращает Истина после инициализации.
//  ДатаСеанса    - Дата - возвращаемое значение (если требуется нестандартный счетчик).
//
// Возвращаемое значение:
//  Булево - Истина, если закончилось время с последнего отсчета и начат новый отсчет.
//
// Пример:
//	ИмяСчетчика = "СтандартныеПодсистемы.ЦентрМониторинга";
//	Если Не СерверныеОповещенияКлиент.ЗакончилосьВремяОжидания(ИмяСчетчика) Тогда
//		Возврат;
//	КонецЕсли;
//
Функция ЗакончилосьВремяОжидания(ИмяСчетчика, ВремяОжидания = 1200, ПервыйРаз = Ложь, ДатаСеанса = '00010101') Экспорт
	
	СостояниеПолучения = СостояниеПолучения();
	ДатаСеанса = СостояниеПолучения.ТекущаяДатаСеансаДляПроверкиСчетчиковОжидания;
	Если Не ЗначениеЗаполнено(ИмяСчетчика) Тогда
		Возврат Ложь;
	КонецЕсли;
	СчетчикиОжидания = СостояниеПолучения.СчетчикиОжидания;
	
	ПоследняяДата = СчетчикиОжидания.Получить(ИмяСчетчика);
	Если ПоследняяДата = Неопределено Тогда
		СчетчикиОжидания.Вставить(ИмяСчетчика, ДатаСеанса);
		Возврат ПервыйРаз;
	КонецЕсли;
	
	Если ПоследняяДата + ВремяОжидания > ДатаСеанса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетчикиОжидания.Вставить(ИмяСчетчика, ДатаСеанса);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. НовоеСостояниеПолучения
Функция СостояниеПолучения()
	
	ИмяПараметраПриложения = "СтандартныеПодсистемы.БазоваяФункциональность.СерверныеОповещения";
	СостояниеПолучения = ПараметрыПриложения.Получить(ИмяПараметраПриложения);
	Если СостояниеПолучения = Неопределено Тогда
		СостояниеПолучения = НовоеСостояниеПолучения();
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, СостояниеПолучения);
	КонецЕсли;
	
	Возврат СостояниеПолучения;
	
КонецФункции  

// Возвращаемое значение:
//  Структура:
//   * ПроверкаРазрешена - Булево - устанавливается Истина в процедуре ПередНачаломРаботыСистемы.
//   * РегистрироватьПоказатели - Булево
//   * СеансАдминистратораСервиса - Булево
//   * ПериодическаяОтправкаДанныхРазрешена - Булево - устанавливается Истина в процедуре ПослеНачалаРаботыСистемы.
//   * МинимальныйИнтервалПериодическойОтправкиДанных - см. СерверныеОповещения.МинимальныйИнтервалПериодическойОтправкиДанных
//   * КлючСеанса - см. СерверныеОповещения.КлючСеанса
//   * ИдентификаторПользователяИБ - УникальныйИдентификатор
//   * ДатаОбновленияСостояния - Дата
//   * ДатаПоследнегоПолученияСообщения - Дата
//   * МинимальныйПериод - Число - число секунд.
//   * ДатаПоследнегоОповещения - Дата
//   * Оповещения - см. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений.Оповещения
//   * ПолученныеОповещения - Массив из Строка - строки уникальных идентификаторов полученных сообщений.
//   * УведомленияКлиентаДоступны - Булево
//   * СистемаВзаимодействийПодключена - Булево
//   * ИдентификаторЛичногоОбсуждения - Неопределено - обсуждение недоступно.
//                                    - ИдентификаторОбсужденияСистемыВзаимодействия - идентификатор
//        обсуждения "СерверныеОповещения <Идентификатор пользователя ИБ>".
//
//   * ИдентификаторОбщегоОбсуждения - Неопределено - обсуждение недоступно.
//                                   - ИдентификаторОбсужденияСистемыВзаимодействия - идентификатор
//        обсуждения "СерверныеОповещения".
//   * ОбработчикНовыхЛичныхСообщенийПодключен - Булево
//   * ОбработчикНовыхОбщихСообщенийПодключен - Булево
//   * ДатаПоследнегоСерверногоВызова - Дата
//   * ТекущаяДатаСеансаДляПроверкиСчетчиковОжидания - Дата
//   * ЧислоСекундВыравниванияДатыСчетчиковОжидания - Число
//   * СчетчикиОжидания - Соответствие из КлючИЗначение:
//      ** Ключ - Строка - имя счетчика
//      ** Значение - Дата - последнее срабатывание счетчика
//   * ПолучитьСейчас - Булево - если Истина, то серверный вызов будет безусловно.
//
Функция НовоеСостояниеПолучения()
	
	Состояние = Новый Структура;
	Состояние.Вставить("ПроверкаРазрешена", Ложь);
	Состояние.Вставить("РегистрироватьПоказатели", Ложь);
	Состояние.Вставить("СеансАдминистратораСервиса", Ложь);
	Состояние.Вставить("ПериодическаяОтправкаДанныхРазрешена", Ложь);
	Состояние.Вставить("МинимальныйИнтервалПериодическойОтправкиДанных", 1);
	Состояние.Вставить("КлючСеанса", "");
	Состояние.Вставить("ИдентификаторПользователяИБ",
		ПустойУникальныйИдентификатор());
	Состояние.Вставить("ДатаОбновленияСостояния", '00010101');
	Состояние.Вставить("ДатаПоследнегоПолученияСообщения", '00010101');
	Состояние.Вставить("МинимальныйПериод", 60);
	Состояние.Вставить("ДатаПоследнегоОповещения", '00010101');
	Состояние.Вставить("Оповещения", Новый Соответствие);
	Состояние.Вставить("ПолученныеОповещения", Новый Массив);
	Состояние.Вставить("УведомленияКлиентаДоступны",
		УведомленияКлиентаДоступны());
	Состояние.Вставить("СистемаВзаимодействийПодключена", Ложь);
	Состояние.Вставить("ИдентификаторЛичногоОбсуждения", Неопределено);
	Состояние.Вставить("ИдентификаторОбщегоОбсуждения", Неопределено);
	Состояние.Вставить("ОбработчикНовыхЛичныхСообщенийПодключен", Ложь);
	Состояние.Вставить("ОбработчикНовыхОбщихСообщенийПодключен", Ложь);
	Состояние.Вставить("ДатаПоследнегоСерверногоВызова", '00010101');
	Состояние.Вставить("ТекущаяДатаСеансаДляПроверкиСчетчиковОжидания", '00010101');
	Состояние.Вставить("ЧислоСекундВыравниванияДатыСчетчиковОжидания", 0);
	Состояние.Вставить("СчетчикиОжидания", Новый Соответствие);
	Состояние.Вставить("ПолучитьСейчас", Ложь);
	
	Возврат Состояние;
	
КонецФункции 

// Возвращает пустой уникальный идентификатор.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - 00000000-0000-0000-0000-000000000000
//
Функция ПустойУникальныйИдентификатор() Экспорт
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции 

Функция УведомленияКлиентаДоступны() Экспорт
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти
